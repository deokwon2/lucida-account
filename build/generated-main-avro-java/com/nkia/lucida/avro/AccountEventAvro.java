/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.nkia.lucida.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AccountEventAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3244090025052472101L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AccountEventAvro\",\"namespace\":\"com.nkia.lucida.avro\",\"fields\":[{\"name\":\"targetType\",\"type\":{\"type\":\"enum\",\"name\":\"TargetType\",\"symbols\":[\"ORGANIZATION\",\"USER\",\"GROUP\",\"ROLE\"]}},{\"name\":\"actionType\",\"type\":{\"type\":\"enum\",\"name\":\"ActionType\",\"symbols\":[\"INSERT\",\"UPDATE\",\"DELETE\",\"LOGIN\",\"LOGOUT\"]}},{\"name\":\"ids\",\"type\":[{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AccountEventAvro> ENCODER =
      new BinaryMessageEncoder<AccountEventAvro>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AccountEventAvro> DECODER =
      new BinaryMessageDecoder<AccountEventAvro>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AccountEventAvro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AccountEventAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AccountEventAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AccountEventAvro>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AccountEventAvro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AccountEventAvro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AccountEventAvro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AccountEventAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private com.nkia.lucida.avro.TargetType targetType;
  private com.nkia.lucida.avro.ActionType actionType;
  private java.util.List<java.lang.String> ids;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AccountEventAvro() {}

  /**
   * All-args constructor.
   * @param targetType The new value for targetType
   * @param actionType The new value for actionType
   * @param ids The new value for ids
   */
  public AccountEventAvro(com.nkia.lucida.avro.TargetType targetType, com.nkia.lucida.avro.ActionType actionType, java.util.List<java.lang.String> ids) {
    this.targetType = targetType;
    this.actionType = actionType;
    this.ids = ids;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return targetType;
    case 1: return actionType;
    case 2: return ids;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: targetType = (com.nkia.lucida.avro.TargetType)value$; break;
    case 1: actionType = (com.nkia.lucida.avro.ActionType)value$; break;
    case 2: ids = (java.util.List<java.lang.String>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'targetType' field.
   * @return The value of the 'targetType' field.
   */
  public com.nkia.lucida.avro.TargetType getTargetType() {
    return targetType;
  }



  /**
   * Gets the value of the 'actionType' field.
   * @return The value of the 'actionType' field.
   */
  public com.nkia.lucida.avro.ActionType getActionType() {
    return actionType;
  }



  /**
   * Gets the value of the 'ids' field.
   * @return The value of the 'ids' field.
   */
  public java.util.List<java.lang.String> getIds() {
    return ids;
  }



  /**
   * Creates a new AccountEventAvro RecordBuilder.
   * @return A new AccountEventAvro RecordBuilder
   */
  public static com.nkia.lucida.avro.AccountEventAvro.Builder newBuilder() {
    return new com.nkia.lucida.avro.AccountEventAvro.Builder();
  }

  /**
   * Creates a new AccountEventAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AccountEventAvro RecordBuilder
   */
  public static com.nkia.lucida.avro.AccountEventAvro.Builder newBuilder(com.nkia.lucida.avro.AccountEventAvro.Builder other) {
    if (other == null) {
      return new com.nkia.lucida.avro.AccountEventAvro.Builder();
    } else {
      return new com.nkia.lucida.avro.AccountEventAvro.Builder(other);
    }
  }

  /**
   * Creates a new AccountEventAvro RecordBuilder by copying an existing AccountEventAvro instance.
   * @param other The existing instance to copy.
   * @return A new AccountEventAvro RecordBuilder
   */
  public static com.nkia.lucida.avro.AccountEventAvro.Builder newBuilder(com.nkia.lucida.avro.AccountEventAvro other) {
    if (other == null) {
      return new com.nkia.lucida.avro.AccountEventAvro.Builder();
    } else {
      return new com.nkia.lucida.avro.AccountEventAvro.Builder(other);
    }
  }

  /**
   * RecordBuilder for AccountEventAvro instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AccountEventAvro>
    implements org.apache.avro.data.RecordBuilder<AccountEventAvro> {

    private com.nkia.lucida.avro.TargetType targetType;
    private com.nkia.lucida.avro.ActionType actionType;
    private java.util.List<java.lang.String> ids;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.nkia.lucida.avro.AccountEventAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.targetType)) {
        this.targetType = data().deepCopy(fields()[0].schema(), other.targetType);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.actionType)) {
        this.actionType = data().deepCopy(fields()[1].schema(), other.actionType);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.ids)) {
        this.ids = data().deepCopy(fields()[2].schema(), other.ids);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing AccountEventAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(com.nkia.lucida.avro.AccountEventAvro other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.targetType)) {
        this.targetType = data().deepCopy(fields()[0].schema(), other.targetType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.actionType)) {
        this.actionType = data().deepCopy(fields()[1].schema(), other.actionType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ids)) {
        this.ids = data().deepCopy(fields()[2].schema(), other.ids);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'targetType' field.
      * @return The value.
      */
    public com.nkia.lucida.avro.TargetType getTargetType() {
      return targetType;
    }


    /**
      * Sets the value of the 'targetType' field.
      * @param value The value of 'targetType'.
      * @return This builder.
      */
    public com.nkia.lucida.avro.AccountEventAvro.Builder setTargetType(com.nkia.lucida.avro.TargetType value) {
      validate(fields()[0], value);
      this.targetType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'targetType' field has been set.
      * @return True if the 'targetType' field has been set, false otherwise.
      */
    public boolean hasTargetType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'targetType' field.
      * @return This builder.
      */
    public com.nkia.lucida.avro.AccountEventAvro.Builder clearTargetType() {
      targetType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'actionType' field.
      * @return The value.
      */
    public com.nkia.lucida.avro.ActionType getActionType() {
      return actionType;
    }


    /**
      * Sets the value of the 'actionType' field.
      * @param value The value of 'actionType'.
      * @return This builder.
      */
    public com.nkia.lucida.avro.AccountEventAvro.Builder setActionType(com.nkia.lucida.avro.ActionType value) {
      validate(fields()[1], value);
      this.actionType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'actionType' field has been set.
      * @return True if the 'actionType' field has been set, false otherwise.
      */
    public boolean hasActionType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'actionType' field.
      * @return This builder.
      */
    public com.nkia.lucida.avro.AccountEventAvro.Builder clearActionType() {
      actionType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'ids' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getIds() {
      return ids;
    }


    /**
      * Sets the value of the 'ids' field.
      * @param value The value of 'ids'.
      * @return This builder.
      */
    public com.nkia.lucida.avro.AccountEventAvro.Builder setIds(java.util.List<java.lang.String> value) {
      validate(fields()[2], value);
      this.ids = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'ids' field has been set.
      * @return True if the 'ids' field has been set, false otherwise.
      */
    public boolean hasIds() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'ids' field.
      * @return This builder.
      */
    public com.nkia.lucida.avro.AccountEventAvro.Builder clearIds() {
      ids = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AccountEventAvro build() {
      try {
        AccountEventAvro record = new AccountEventAvro();
        record.targetType = fieldSetFlags()[0] ? this.targetType : (com.nkia.lucida.avro.TargetType) defaultValue(fields()[0]);
        record.actionType = fieldSetFlags()[1] ? this.actionType : (com.nkia.lucida.avro.ActionType) defaultValue(fields()[1]);
        record.ids = fieldSetFlags()[2] ? this.ids : (java.util.List<java.lang.String>) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AccountEventAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<AccountEventAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AccountEventAvro>
    READER$ = (org.apache.avro.io.DatumReader<AccountEventAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeEnum(this.targetType.ordinal());

    out.writeEnum(this.actionType.ordinal());

    if (this.ids == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      long size0 = this.ids.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (java.lang.String e0: this.ids) {
        actualSize0++;
        out.startItem();
        out.writeString(e0);
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.targetType = com.nkia.lucida.avro.TargetType.values()[in.readEnum()];

      this.actionType = com.nkia.lucida.avro.ActionType.values()[in.readEnum()];

      if (in.readIndex() != 0) {
        in.readNull();
        this.ids = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<java.lang.String> a0 = this.ids;
        if (a0 == null) {
          a0 = new SpecificData.Array<java.lang.String>((int)size0, SCHEMA$.getField("ids").schema().getTypes().get(0));
          this.ids = a0;
        } else a0.clear();
        SpecificData.Array<java.lang.String> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            java.lang.String e0 = (ga0 != null ? ga0.peek() : null);
            e0 = in.readString();
            a0.add(e0);
          }
        }
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.targetType = com.nkia.lucida.avro.TargetType.values()[in.readEnum()];
          break;

        case 1:
          this.actionType = com.nkia.lucida.avro.ActionType.values()[in.readEnum()];
          break;

        case 2:
          if (in.readIndex() != 0) {
            in.readNull();
            this.ids = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<java.lang.String> a0 = this.ids;
            if (a0 == null) {
              a0 = new SpecificData.Array<java.lang.String>((int)size0, SCHEMA$.getField("ids").schema().getTypes().get(0));
              this.ids = a0;
            } else a0.clear();
            SpecificData.Array<java.lang.String> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                java.lang.String e0 = (ga0 != null ? ga0.peek() : null);
                e0 = in.readString();
                a0.add(e0);
              }
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










